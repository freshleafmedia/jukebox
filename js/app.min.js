(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var JukeboxController = require("./controllers/ApplicationController.js").default;
var socket = io('//:3000');

new JukeboxController(socket);

// ----

$(window).on('scroll', function () {
    var y_scroll_pos = window.pageYOffset;
    var scroll_pos_test = 120; // set to whatever you want it to be

    if (y_scroll_pos > scroll_pos_test) {
        $('header').addClass('scrolled');
    } else {
        $('header').removeClass('scrolled');
    }
});

if (typeof navigator.serviceWorker !== 'undefined') {
    navigator.serviceWorker.register('/worker.js', {
        scope: '/'
    }).then(function (reg) {
        console.log('service worker registered', reg);
    }, function (err) {
        console.log('service worker NOT registered', err);
    });
}

},{"./controllers/ApplicationController.js":4}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    soundbites: require('./soundbites').default
};

},{"./soundbites":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = {
    sounds: ['YLgKPEhyg3k', // Jam Sandwich
    'cdEQmpVIE4A', // Disappointed
    'kD_xWrhZ8yI', // That's what she said
    '3KVEe6UVpYw' // Kids 'Yay'
    ]
};

},{}],4:[function(require,module,exports){
"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchController = require("./SearchController.js").default;
var Playlist = require("./PlaylistController.js").default;
var SoundbitesController = require("./SoundbitesController.js").default;
var notify = require("../helpers/notifications.js").notify;

var ApplicationController = (function () {
    function ApplicationController(socket) {
        _classCallCheck(this, ApplicationController);

        this.socket = socket;
        this.playlists = {};
        this.setEventHandlers();
        new SearchController(socket);
        this.setupSockets();
        new SoundbitesController(socket);
    }

    _createClass(ApplicationController, [{
        key: "setupSockets",
        value: function setupSockets() {
            var _this = this;

            this.socket.on('connect', function () {
                console.log('connected to websocket server');
                $('#playButton, #pauseButton, #volupButton, #voldownButton, #shuffleSongs, #forwardButton').removeClass('disabled');
            });

            this.socket.on('disconnect', function () {
                console.log('disconnected');
                $('.media-controls .btn, #shutdown, #shuffleSongs').addClass('disabled');
            });
            this.socket.on('playlist', function (playlistData) {
                _this.setPlaylist(playlistData);
            });

            this.socket.on('songRemove', function (song) {
                _this.getPlaylist().removeSong(song);
            });

            this.socket.on('songAdd', function (song) {
                notify('Song Added', song.data.title);
            });

            this.socket.on('songStatus', function (song) {
                if (song.state === 'playing') {
                    notify('Now Playing', song.data.title);
                    _this.updateNowPlaying(song.data.title);
                }
                _this.getPlaylist().updateSongStatus(song);
            });

            this.socket.on('songPosition', function (position) {
                _this.getPlaylist().updateSongPosition(position);
            });
        }
    }, {
        key: "setEventHandlers",
        value: function setEventHandlers() {
            var _this2 = this;

            $(document).on('click', 'button[data-action]', function (e) {
                if ($(e.currentTarget).hasClass('disabled')) {
                    console.warn('Button disabled');
                    return;
                }

                // Get the action to send
                var action = $(e.currentTarget).attr('data-action');

                _this2.control(action);
            });
        }
    }, {
        key: "control",
        value: function control(action) {
            console.log('Sending action: ' + action);
            this.socket.emit('control', action);
        }
    }, {
        key: "setPlaylist",
        value: function setPlaylist(playlistData) {
            // Try and add this playlist
            this.addPlaylist(playlistData, true);

            this.playlistID = playlistData.ID;
        }
    }, {
        key: "addPlaylist",
        value: function addPlaylist(playlistData, overwrite) {
            // Check if we have already loaded this playlist
            if (overwrite === true || typeof this.playlists[playlistData.ID] === 'undefined') {
                this.playlists[playlistData.ID] = new Playlist(playlistData);
            }
        }
    }, {
        key: "getPlaylist",
        value: function getPlaylist() {
            return this.playlists[this.playlistID];
        }
    }, {
        key: "updateNowPlaying",
        value: function updateNowPlaying(title) {
            if (title == '') {
                $('title').text('Freshleaf Jukebox');
            } else {
                $('title').text(title + ' - Freshleaf Jukebox');
            }
        }
    }]);

    return ApplicationController;
})();

exports.default = ApplicationController;

},{"../helpers/notifications.js":8,"./PlaylistController.js":5,"./SearchController.js":6,"./SoundbitesController.js":7}],5:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlaylistController = (function () {
    function PlaylistController(playlistData) {
        _classCallCheck(this, PlaylistController);

        this.ID = playlistData.ID;
        this.songs = [];
        this.El = $('.queue-container');
        this.build(playlistData);
    }

    _createClass(PlaylistController, [{
        key: 'build',
        value: function build(playlistData) {
            //Clear the current playlist
            this.El.html('');

            $.each(playlistData.songs, (function (index, song) {

                this.addSong(song);
            }).bind(this));
        }
    }, {
        key: 'buildSong',
        value: function buildSong(song) {
            var item = $('<div />', { 'class': 'songResult', 'id': 'song-' + song.id, 'data-state': song.state });

            var image = $('<img />', { src: song.thumbnail });
            var duration = $('<p />', { 'class': 'duration', text: (song.data.duration / 60).toFixed(2) });
            var title = $('<p />', { 'class': 'title', text: song.data.title });
            var progress = $('<progress />', { value: song.position, max: song.data.duration });
            var username = $('<p />', { 'class': 'username', text: song.username });

            var imgwrap = $('<div />', { 'class': 'imageWrapper' });
            var contentwrap = $('<div />', { 'class': 'contentWrapper' });

            imgwrap.append(image);
            contentwrap.append(title);
            contentwrap.append(progress);
            item.append(imgwrap);
            item.append(contentwrap);
            item.append(username);
            item.append(duration);

            return item;
        }
    }, {
        key: 'removeSong',
        value: function removeSong(songToRemove) {
            this.El.children('#song-' + songToRemove.id).remove();

            for (var i = 0; i < this.songs.length; i++) {
                var song = this.songs[i];

                if (song.id === songToRemove.id) {
                    this.songs.splice(i, 1);
                    break;
                }
            }
        }
    }, {
        key: 'addSong',
        value: function addSong(song) {
            this.El.append(this.buildSong(song));
        }
    }, {
        key: 'updateSongStatus',
        value: function updateSongStatus(song) {
            var songEl = this.El.find('.songResult#song-' + song.id);
            songEl.attr('data-state', song.state);
            songEl.find('.duration').text((song.data.duration / 60).toFixed(2));
            songEl.find('progress').attr('value', song.position);
            songEl.find('progress').attr('max', song.data.duration);
        }
    }, {
        key: 'updateSongPosition',
        value: function updateSongPosition(position) {
            var songEl = this.El.find('.songResult[data-state=playing]');
            songEl.find('progress').attr('value', position);
        }
    }]);

    return PlaylistController;
})();

exports.default = PlaylistController;

},{}],6:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SearchController = (function () {
    function SearchController(socket) {
        _classCallCheck(this, SearchController);

        this.socket = socket;
        this.dialogEl = $('#addDialog');
        this.userSetupEl = $('#user-setup');
        this.searchControlsEl = $('#search-controls');

        this.initUser();
        this.initGoogleApi(this.searchReady);
        this.initKeyEvents();
        this.initClickEvents();
    }

    _createClass(SearchController, [{
        key: 'initUser',
        value: function initUser() {
            var _this = this;

            if (localStorage.getItem('username')) {
                this.userSetupEl.hide();
                this.searchControlsEl.show();
            }
            $('#addUser').submit(function (e) {
                e.preventDefault();
                if ($('#username').val() != "") {
                    localStorage.setItem('username', $('#username').val());
                    _this.userSetupEl.hide();
                    _this.searchControlsEl.show();
                }
            });
        }
    }, {
        key: 'searchReady',
        value: function searchReady() {
            $('#search').prop('disabled', false);
        }
    }, {
        key: 'initGoogleApi',
        value: function initGoogleApi(callback) {
            setTimeout(googleApiClientReady, 1000);
            function googleApiClientReady() {
                gapi.client.setApiKey('AIzaSyC5ZNaxUE7HwOxi6r5xMq9aeRlUVdJXU7I');
                gapi.auth.init(function () {
                    gapi.client.load('youtube', 'v3', function () {
                        callback();
                    });
                });
            }
        }
    }, {
        key: 'initKeyEvents',
        value: function initKeyEvents() {
            var _this2 = this;

            $(document).keyup(function (event) {
                // Up/Down and j/k keys to navigate selecting a song
                if (event.keyCode == 40 || event.keyCode == 74) {
                    if ($('.highlight').length) {
                        var highlighted = $('.highlight');
                        highlighted.next().addClass('highlight');
                        highlighted.removeClass('highlight');
                    } else {
                        $('#search-container > .songResult:first-child').addClass('highlight');
                    }
                    return;
                }
                if (event.keyCode == 38 || event.keyCode == 75) {
                    if ($('.highlight').length) {
                        var highlighted = $('.highlight');
                        highlighted.prev().addClass('highlight');
                        highlighted.removeClass('highlight');
                    }
                    return;
                }
                // Esc closes dialog
                if (event.keyCode == 27) {
                    _this2.closeDialog();
                }
                // Run search on keydown in search box
                if ($(event.target).is('#search')) {
                    if (event.keyCode == 13 && $('.highlight').length) {
                        $('.highlight').click();
                        return;
                    }
                    _this2.search($('#search').val());
                }
                // Keys when form input isn't focused
                if (!$(event.target).is('input')) {
                    // A or Enter triggers dialog
                    if (event.keyCode == 65 || event.keyCode == 13) {
                        _this2.showDialog();
                    }
                }
            });
        }
    }, {
        key: 'search',
        value: function search(query) {
            var request = gapi.client.youtube.search.list({
                q: query,
                part: 'snippet',
                maxResults: '25'
            });

            request.execute(function (response) {
                $('#search-container').html('');
                $.each(response.result.items, function (index, item) {
                    if (item.id.kind == "youtube#video") {
                        var el = $('<div />', { 'class': 'songResult' });
                        el.data('url', item.id.videoId);
                        var image = $('<img />', { src: item.snippet.thumbnails.default.url });
                        var descWrap = $('<div />');
                        var title = $('<p />', { text: item.snippet.title, 'class': 'title' });
                        //var author = $('<p />', { text: item.snippet.channelTitle, 'class': 'description' });
                        descWrap.append(title);
                        //descWrap.append(author);
                        var imgwrap = $('<div />', { 'class': 'imageWrapper' });
                        imgwrap.append(image);
                        el.append(imgwrap);
                        el.append(descWrap);
                        $('#search-container').append(el);
                    }
                });
            });
        }
    }, {
        key: 'showDialog',
        value: function showDialog() {
            this.dialogEl.show();
            if (localStorage.getItem('username')) {
                $('#search').focus().val('');
            } else {
                $('#username').focus().val('');
            }
        }
    }, {
        key: 'closeDialog',
        value: function closeDialog() {
            this.dialogEl.hide();
        }
    }, {
        key: 'initClickEvents',
        value: function initClickEvents() {
            var _this3 = this;

            $('#addButton').click(function () {
                _this3.showDialog();
            });
            $('#addDialogClose, .overlay').click(function () {
                _this3.closeDialog();
            });
            $('#search-container').on('click', '> div', function (event) {
                var song = {
                    id: $(event.currentTarget).data('url'),
                    title: $(event.currentTarget).find('p.title').text(),
                    thumbnail: $(event.currentTarget).find('img').attr('src'),
                    username: localStorage.getItem('username')
                };
                _this3.addSongToPlaylist(song);
                $(event.currentTarget).addClass('added');
            });
        }
    }, {
        key: 'addSongToPlaylist',
        value: function addSongToPlaylist(song) {
            console.log('Adding.. ' + song.id);
            this.socket.emit('addsong', song);
        }
    }]);

    return SearchController;
})();

exports.default = SearchController;

},{}],7:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var config = require('../config/config.js').default;

"use strict";

var SoundbitesController = (function () {
    function SoundbitesController(socket) {
        _classCallCheck(this, SoundbitesController);

        this.socket = socket;
        this.buildControls();
    }

    _createClass(SoundbitesController, [{
        key: 'buildControls',
        value: function buildControls() {
            var _this = this;

            var sounds = config.soundbites.sounds;
            var container = document.createElement('div');
            container.className = 'soundbites';
            for (var id in sounds) {
                if (sounds.hasOwnProperty(id)) {
                    var youtubeId = sounds[id];
                    var element = document.createElement('div');
                    element.className = 'soundbite';
                    element.setAttribute('data-id', youtubeId);
                    element.textContent = id;
                    container.appendChild(element);
                }
            }
            document.querySelector('body').appendChild(container);
            document.addEventListener('keyup', function () {
                container.style.display = 'flex';
            });
            container.addEventListener('click', function (event) {
                if (event.target.className === 'soundbite') {
                    var _youtubeId = event.target.dataset.id;
                    _this.play(_youtubeId);
                }
            });
        }
    }, {
        key: 'play',
        value: function play(id) {
            this.socket.emit('soundbite', id);
        }
    }]);

    return SoundbitesController;
})();

exports.default = SoundbitesController;

},{"../config/config.js":2}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.notify = notify;
function notify(title, content) {
    if (window.Notification) {
        if (Notification.permission === "granted") {
            var notification = new Notification(title, { 'body': content, 'icon': '/favicon.ico' });
        } else {
            Notification.requestPermission(function (permission) {
                var notification = new Notification(title, { 'body': content, 'icon': '/favicon.ico' });
            });
        }
    }
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
