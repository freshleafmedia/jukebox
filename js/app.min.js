(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var Jukebox = require("./jukebox.js").default;
var Search = require("./search.js").default;

var socket = io('//:3000');
socket.on('connect', function () {
    console.log('connected to websocket server');
    $('#playButton, #pauseButton, #volupButton, #voldownButton').removeClass('disabled');
});

socket.on('disconnect', function () {
    console.log('disconnected');
    $('.media-controls .btn, #shutdown').addClass('disabled');
});

var player = new Jukebox(socket);
var search = new Search(socket);

function notify(title, content) {
    if (window.Notification) {
        if (Notification.permission === "granted") {
            var notification = new Notification(title, { 'body': content, 'icon': '/favicon.ico' });
        } else {
            Notification.requestPermission(function (permission) {
                var notification = new Notification(title, { 'body': content, 'icon': '/favicon.ico' });
            });
        }
    }
}

function updateNowPlaying(title) {
    if (title == '') {
        $('title').text('Freshleaf Jukebox');
    } else {
        $('title').text(title + ' - Freshleaf Jukebox');
    }
}

$(window).on('scroll', function () {
    var y_scroll_pos = window.pageYOffset;
    var scroll_pos_test = 120; // set to whatever you want it to be

    if (y_scroll_pos > scroll_pos_test) {
        $('header').addClass('scrolled');
    } else {
        $('header').removeClass('scrolled');
    }
});

socket.on('playlist', function (playlistData) {
    player.setPlaylist(playlistData);
});

socket.on('songRemove', function (song) {
    player.getPlaylist().removeSong(song);
});

socket.on('songAdd', function (song) {
    notify('Song Added', song.title);
    player.getPlaylist().addSong(song);
});

socket.on('songStatus', function (song) {
    if (song.status === 'playing') {
        notify('Now Playing', song.title);
    }
    player.getPlaylist().updateSongStatus(song);
});

socket.on('songPosition', function (position) {
    player.getPlaylist().updateSongPosition(position);
});

navigator.serviceWorker.register('/worker.js', {
    scope: '/'
}).then(function (reg) {
    console.log('service worker registered', reg);
}, function (err) {
    console.log('service worker NOT registered', err);
});

},{"./jukebox.js":2,"./search.js":4}],2:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Playlist = require("./playlist.js").default;

var Jukebox = (function () {
    function Jukebox(socket) {
        _classCallCheck(this, Jukebox);

        this.socket = socket;
        this.playlists = {};
        this.setEventHandlers();
    }

    _createClass(Jukebox, [{
        key: 'setEventHandlers',
        value: function setEventHandlers() {
            var _this = this;

            $('.media-controls').on('click', '.btn', function (e) {
                if ($(e.currentTarget).hasClass('disabled')) {
                    console.warn('Button disabled');
                    return;
                }

                // Get the action to send
                var action = $(e.currentTarget).attr('data-action');

                _this.control(action);
            });
        }
    }, {
        key: 'control',
        value: function control(action) {
            console.log('Sending action: ' + action);
            this.socket.emit('control', action);
        }
    }, {
        key: 'setPlaylist',
        value: function setPlaylist(playlistData) {
            // Try and add this playlist
            this.addPlaylist(playlistData);

            this.playlistID = playlistData.ID;
        }
    }, {
        key: 'addPlaylist',
        value: function addPlaylist(playlistData, overwrite) {
            // Check if we have already loaded this playlist
            if (overwrite === true || typeof this.playlists[playlistData.ID] === 'undefined') {
                this.playlists[playlistData.ID] = new Playlist(playlistData);
            }
        }
    }, {
        key: 'getPlaylist',
        value: function getPlaylist() {
            return this.playlists[this.playlistID];
        }
    }]);

    return Jukebox;
})();

exports.default = Jukebox;

},{"./playlist.js":3}],3:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Playlist = (function () {
    function Playlist(playlistData) {
        _classCallCheck(this, Playlist);

        this.ID = playlistData.ID;
        this.songs = [];
        this.El = $('.queue-container');
        this.build(playlistData);
    }

    _createClass(Playlist, [{
        key: 'build',
        value: function build(playlistData) {
            $.each(playlistData.songs, (function (index, song) {

                this.addSong(song);
            }).bind(this));
        }
    }, {
        key: 'buildSong',
        value: function buildSong(song) {
            var item = $('<div />', { 'class': 'songResult', 'id': 'song-' + song.youTubeID, 'data-state': song.state });

            var image = $('<img />', { src: song.thumbnail });
            var duration = $('<p />', { 'class': 'duration', text: (song.data.duration / 60).toFixed(2) });
            var title = $('<p />', { 'class': 'title', text: song.data.title });
            var progress = $('<progress />', { value: song.position, max: song.data.duration });

            var imgwrap = $('<div />', { 'class': 'imageWrapper' });
            var contentwrap = $('<div />', { 'class': 'contentWrapper' });

            imgwrap.append(image);
            contentwrap.append(title);
            contentwrap.append(progress);
            item.append(imgwrap);
            item.append(contentwrap);
            item.append(duration);

            return item;
        }
    }, {
        key: 'removeSong',
        value: function removeSong(songToRemove) {
            this.El.children('#song-' + songToRemove.youTubeID).remove();

            for (var i = 0; i < this.songs.length; i++) {
                var song = this.songs[i];

                if (song.youTubeID === songToRemove.youTubeID) {
                    this.songs.splice(i, 1);
                    break;
                }
            }
        }
    }, {
        key: 'addSong',
        value: function addSong(song) {
            this.El.append(this.buildSong(song));
        }
    }, {
        key: 'updateSongStatus',
        value: function updateSongStatus(song) {
            var songEl = this.El.find('.songResult#song-' + song.youTubeID);
            songEl.attr('data-state', song.state);
            songEl.find('.duration').text((song.data.duration / 60).toFixed(2));
            songEl.find('progress').attr('value', song.position);
            songEl.find('progress').attr('max', song.data.duration);
        }
    }, {
        key: 'updateSongPosition',
        value: function updateSongPosition(position) {
            var songEl = this.El.find('.songResult[data-state=playing]');
            songEl.find('progress').attr('value', position);
        }
    }]);

    return Playlist;
})();

exports.default = Playlist;

},{}],4:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Search = (function () {
    function Search(socket) {
        _classCallCheck(this, Search);

        this.socket = socket;
        this.dialogEl = $('#addDialog');

        this.initGoogleApi(this.searchReady);
        this.initKeyEvents();
        this.initClickEvents();
    }

    _createClass(Search, [{
        key: 'searchReady',
        value: function searchReady() {
            $('#search').prop('disabled', false);
        }
    }, {
        key: 'initGoogleApi',
        value: function initGoogleApi(callback) {
            setTimeout(googleApiClientReady, 1000);
            function googleApiClientReady() {
                gapi.client.setApiKey('AIzaSyC5ZNaxUE7HwOxi6r5xMq9aeRlUVdJXU7I');
                gapi.auth.init(function () {
                    gapi.client.load('youtube', 'v3', function () {
                        callback();
                    });
                });
            }
        }
    }, {
        key: 'initKeyEvents',
        value: function initKeyEvents() {
            var _this = this;

            $(document).keyup(function (event) {
                // Up/Down and j/k keys to navigate selecting a song
                if (event.keyCode == 40 || event.keyCode == 74) {
                    if ($('.highlight').length) {
                        var highlighted = $('.highlight');
                        highlighted.next().addClass('highlight');
                        highlighted.removeClass('highlight');
                    } else {
                        $('#search-container > .songResult:first-child').addClass('highlight');
                    }
                    return;
                }
                if (event.keyCode == 38 || event.keyCode == 75) {
                    if ($('.highlight').length) {
                        var highlighted = $('.highlight');
                        highlighted.prev().addClass('highlight');
                        highlighted.removeClass('highlight');
                    }
                    return;
                }
                // Esc closes dialog
                if (event.keyCode == 27) {
                    _this.closeDialog();
                }
                // Run search on keydown in search box
                if ($(event.target).is('#search')) {
                    if (event.keyCode == 13 && $('.highlight').length) {
                        $('.highlight').click();
                        return;
                    }
                    _this.search($('#search').val());
                }
                // Keys when form input isn't focused
                if (!$(event.target).is('input')) {
                    // A or Enter triggers dialog
                    if (event.keyCode == 65 || event.keyCode == 13) {
                        _this.showDialog();
                    }
                }
            });
        }
    }, {
        key: 'search',
        value: function search(query) {
            var request = gapi.client.youtube.search.list({
                q: query,
                part: 'snippet',
                maxResults: '25'
            });

            request.execute(function (response) {
                $('#search-container').html('');
                $.each(response.result.items, function (index, item) {
                    if (item.id.kind == "youtube#video") {
                        var el = $('<div />', { 'class': 'songResult' });
                        el.data('url', item.id.videoId);
                        var image = $('<img />', { src: item.snippet.thumbnails.default.url });
                        var descWrap = $('<div />');
                        var title = $('<p />', { text: item.snippet.title, 'class': 'title' });
                        //var author = $('<p />', { text: item.snippet.channelTitle, 'class': 'description' });
                        descWrap.append(title);
                        //descWrap.append(author);
                        var imgwrap = $('<div />', { 'class': 'imageWrapper' });
                        imgwrap.append(image);
                        el.append(imgwrap);
                        el.append(descWrap);
                        $('#search-container').append(el);
                    }
                });
            });
        }
    }, {
        key: 'showDialog',
        value: function showDialog() {
            this.dialogEl.show();
            $('#search').focus().val('');
        }
    }, {
        key: 'closeDialog',
        value: function closeDialog() {
            this.dialogEl.hide();
        }
    }, {
        key: 'initClickEvents',
        value: function initClickEvents() {
            var _this2 = this;

            $('#addButton').click(function () {
                _this2.showDialog();
            });
            $('#addDialogClose, .overlay').click(function () {
                _this2.closeDialog();
            });
            $('#search-container').on('click', '> div', function (event) {
                var song = {
                    id: $(event.currentTarget).data('url'),
                    title: $(event.currentTarget).find('p.title').text(),
                    thumbnail: $(event.currentTarget).find('img').attr('src')
                };
                _this2.addSongToPlaylist(song);
                $(event.currentTarget).addClass('added');
            });
        }
    }, {
        key: 'addSongToPlaylist',
        value: function addSongToPlaylist(song) {
            console.log('Adding.. ' + song.id);
            this.socket.emit('addsong', song);
        }
    }]);

    return Search;
})();

exports.default = Search;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
